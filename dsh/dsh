#!/bin/bash

set -o posix

clear

setupPaths() {
    # Determine real path to dsh directory
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    PATH_TO_DSH_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
    PATH_TO_DSHUI="${PATH_TO_DSH_DIR}/dshui.sh"
    PATH_TO_DSH_FUNCTIONS="${PATH_TO_DSH_DIR}/dshfunctions.sh"
    PATH_TO_DDMS="${PATH_TO_DSH_DIR/dsh/}"
}

loadLibrary() {
    [[ ! -f "${1}" ]] && printf "\n\n\e[33mError! Failed to load ${1}!\e[0m\n\n" && exit 1
    . "${1}"
}

setupPaths

loadLibrary "${PATH_TO_DSH_FUNCTIONS}"

loadLibrary "${PATH_TO_DSHUI}"

[[ "$(command -v php)" != "/usr/bin/php" ]] && showPHPVersionErrorAndExit

[[ "$(determinePhpVersion)" -lt '74' ]] && showPHPVersionErrorAndExit


####### Process flags #######
while test $# -gt 0; do
  case "$1" in
  -h | --help)
    shift
    showHelpMsg "${1}" "${2}" "${3}"
    exit 0
    ;;
  -s | --start-app-server*)
    shift
    if [[ -n "${1}" ]]; then
      startAppServer "${1}"
      exit 0
    fi
    notifyUser "Error! You must specify a port when using the -s flag. For example: ${HIGHLIGHTCOLOR}dsh -s 8888${CLEAR_ALL_TEXT_STYLES}"
    exit 1
    ;;
  -t | --test-ddms*)
    shift
    runPhpUnit
    exit 0
    ;;
  -b | --build-app*)
    shift
    buildApp "${1}"
    exit 0
    ;;
  -r | --run-app*)
    shift
    runApp "${1}"
    exit 0
    ;;
   -j | --active-development-servers*)
    shift
    showActiveDevelopmentServers
    exit 0
    ;;
  -k | --stop-all-development-servers*)
    shift
    stopAllDevelopmentServers
    exit 0
    ;;
  -n | --new*)
    shift
    if [[ "${1}" == 'app' || "${1}" == 'a' ]]; then
        createNewApp "${2}" && runApp "${2}"
        exit 0
    fi
    if [[ "${1}" == 'DynamicOutputComponent' || "${1}" == 'doc' ]]; then
        createNewDynamicOutputComponent "${2}" "${3}" "${4}" "${5}"
        exit 0
    fi
    showBanner "Error: dsh --new expects mode be specified"
    notifyUser "${ERRORCOLOR}The --new flag expects a mode be specified. The following modes are available:" 0 'dontClear'
    notifyUser "${HIGHLIGHTCOLOR}dsh --new app <APP_DIRECTORY_NAME>" 0 'dontClear'
    notifyUser "${HIGHLIGHTCOLOR}dsh --new DynamicOutputComponent <APP_DIRECTORY_NAME> <DYNAMIC_OUTPUT_COMPONENT_NAME> <DYNAMIC_OUTPUT_COMPONENT_POSITION> <DYNAMIC_OUTPUT_FILE_NAME>" 0 'dontClear'
    notifyUser "For help with the --new flag, run ${HIGHLIGHTCOLOR}dsh --help new" 0 'dontClear'
    exit 1
    ;;
  *)
    notifyUser "${WARNING_COLOR}Invalid flag ${1}"
    break
    ;;
  esac
done


